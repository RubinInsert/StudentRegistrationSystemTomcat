/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-30 08:55:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.rubinin.Semester;
import com.rubinin.Course;
import java.util.List;

public final class course_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.rubinin.Course");
    _jspx_imports_classes.add("com.rubinin.Semester");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      com.rubinin.CourseService courseService = null;
      synchronized (session) {
        courseService = (com.rubinin.CourseService) _jspx_page_context.getAttribute("courseService", jakarta.servlet.jsp.PageContext.SESSION_SCOPE);
        if (courseService == null){
          courseService = new com.rubinin.CourseService();
          _jspx_page_context.setAttribute("courseService", courseService, jakarta.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Course Information</title>\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\r\n");
      out.write("    <script src=\"scripts/course.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"course-container\">\r\n");
      out.write("        <h1>Course Information</h1>\r\n");
      out.write("\r\n");
      out.write("        ");

            // Fetch the selected semester ID from the session
            int selectedSemesterID = -1;
            List<Course> courses = null;

            try {
                System.out.println("Fetching semester ID from session: " + session.getAttribute("semester"));
                selectedSemesterID = Integer.parseInt((String) session.getAttribute("semester"));
            } catch (NumberFormatException e) {
                selectedSemesterID = -1; // Default to -1 if parsing fails
            }

            // Fetch courses for the selected semester
            if (selectedSemesterID != -1) {
                courses = courseService.getCoursesBySemesterID(selectedSemesterID);
            }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <form id=\"courseForm\" action=\"/confirm\" method=\"post\">\r\n");
      out.write("            <label for=\"courseCode\">Course Code:</label>\r\n");
      out.write("            <input type=\"text\" id=\"courseCode\" list=\"courseCodes\" oninput=\"filterCourses()\">\r\n");
      out.write("\r\n");
      out.write("            <!-- Datalist for course codes -->\r\n");
      out.write("            <datalist id=\"courseCodes\">\r\n");
      out.write("                ");
 if (courses != null) { 
      out.write("\r\n");
      out.write("                    ");
 for (Course course : courses) {
                        if(courseService.isCourseFull(course)) continue; 
      out.write("\r\n");
      out.write("                        <option id=\"");
      out.print( course.getCourseID());
      out.write("\" data-value='{\"ID\":\"");
      out.print( course.getCourseID() );
      out.write("\", \"name\":\"");
      out.print( course.getCourseName() );
      out.write("\", \"maxCapacity\":");
      out.print( course.getMaxCapacity() );
      out.write(", \"units\":");
      out.print( course.getCredits() );
      out.write("}' value=\"");
      out.print( course.getCourseID() );
      out.write("\"></option>\r\n");
      out.write("                    ");
 } 
      out.write("\r\n");
      out.write("                ");
 } else { 
      out.write("\r\n");
      out.write("                    <option value=\"\" disabled>No courses available</option>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </datalist>\r\n");
      out.write("\r\n");
      out.write("            <button type=\"button\" onclick=\"addCourse()\">Add Course</button>\r\n");
      out.write("\r\n");
      out.write("            <!-- Table for selected courses -->\r\n");
      out.write("            <table id=\"courseTable\">\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <th>Course ID</th>\r\n");
      out.write("                    <th>Course Name</th>\r\n");
      out.write("                    <th>Max Capacity</th>\r\n");
      out.write("                    <th>Units</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </table>\r\n");
      out.write("\r\n");
      out.write("            <input type=\"hidden\" id=\"selectedCourses\" name=\"selectedCourses\">\r\n");
      out.write("            <input type=\"submit\" value=\"Submit\">\r\n");
      out.write("\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("    <script>\r\n");
      out.write("    var chosenCourseUnits = 0;\r\n");
      out.write("    function addCourse() {\r\n");
      out.write("        var course = {\r\n");
      out.write("            ID: null,\r\n");
      out.write("            name: null,\r\n");
      out.write("            maxCapacity: null,\r\n");
      out.write("            units: null\r\n");
      out.write("        };\r\n");
      out.write("        enteredCourseCode = document.getElementById('courseCode').value;\r\n");
      out.write("        var selectedCourse = null;\r\n");
      out.write("        var findCourse = document.getElementById(enteredCourseCode);\r\n");
      out.write("        if (findCourse) {\r\n");
      out.write("            selectedCourse = findCourse.getAttribute('data-value');\r\n");
      out.write("        } else {\r\n");
      out.write("            alert('Course not found in the list. Please select a valid course.');\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("        course = JSON.parse(selectedCourse);\r\n");
      out.write("        if (course.ID !== null) {\r\n");
      out.write("            if(chosenCourseUnits + parseInt(course.units) > 40) {\r\n");
      out.write("                alert('You cannot select more than 40 units in total.');\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            chosenCourseUnits += parseInt(course.units);\r\n");
      out.write("\r\n");
      out.write("            var selectedCourses = document.getElementById('selectedCourses').value;\r\n");
      out.write("            var selectedCoursesArray = selectedCourses ? selectedCourses.split(',') : [];\r\n");
      out.write("            selectedCoursesArray.push(course.ID);\r\n");
      out.write("            document.getElementById('selectedCourses').value = selectedCoursesArray.join(',');\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            var table = document.getElementById('courseTable');\r\n");
      out.write("            var row = table.insertRow();\r\n");
      out.write("            row.insertCell(0).innerHTML = course.ID;\r\n");
      out.write("            row.insertCell(1).innerHTML = course.name;\r\n");
      out.write("            row.insertCell(2).innerHTML = course.maxCapacity;\r\n");
      out.write("            row.insertCell(3).innerHTML = course.units;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        } else {\r\n");
      out.write("            alert('Course not found');\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
